/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientFrame.java
 *
 * Created on 16-Sep-2010, 08:37:39
 */

package socketnio.client;


import com.barcap.simulator.util.ui.AbstractView;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author marco
 */
public class ClientFrame extends javax.swing.JFrame
    implements AbstractView<String>{

    private static final long serialVersionUID = 3925432726285664795L;
    private ClientController clientController;
    private static final Log LOGGER = LogFactory.getLog(ClientFrame.class);

    /** Creates new form ClientFrame */
    public ClientFrame(ClientController controller) {
        initComponents();
        this.clientController = controller;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InputOutputPane = new javax.swing.JSplitPane();
        serverPane = new javax.swing.JScrollPane();
        serverTextArea = new javax.swing.JTextArea();
        clientPane = new javax.swing.JScrollPane();
        clientTextArea = new javax.swing.JTextArea();
        Send = new javax.swing.JButton();
        clientPaneLabel = new javax.swing.JLabel();
        serverPaneLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InputOutputPane.setDividerLocation(140);

        serverTextArea.setColumns(20);
        serverTextArea.setRows(5);
        serverPane.setViewportView(serverTextArea);

        InputOutputPane.setRightComponent(serverPane);

        clientTextArea.setColumns(20);
        clientTextArea.setRows(5);
        clientPane.setViewportView(clientTextArea);

        InputOutputPane.setLeftComponent(clientPane);

        Send.setText("Send");
        Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendActionPerformed(evt);
            }
        });

        clientPaneLabel.setText("Client Pane");

        serverPaneLabel.setText("ServerPane");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Send)
                    .addComponent(InputOutputPane, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clientPaneLabel)
                        .addGap(74, 74, 74)
                        .addComponent(serverPaneLabel)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientPaneLabel)
                    .addComponent(serverPaneLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InputOutputPane, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Send)
                .addGap(64, 64, 64))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendActionPerformed
        String clientText = clientTextArea.getText().trim();
        cleanInputTextArea();
        clientController.sendMessage(clientText);
        // TODO add your handling code here:
    }//GEN-LAST:event_SendActionPerformed

    private void cleanInputTextArea() {
        clientTextArea.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane InputOutputPane;
    private javax.swing.JButton Send;
    private javax.swing.JScrollPane clientPane;
    private javax.swing.JLabel clientPaneLabel;
    private javax.swing.JTextArea clientTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane serverPane;
    private javax.swing.JLabel serverPaneLabel;
    private javax.swing.JTextArea serverTextArea;
    // End of variables declaration//GEN-END:variables

    public void init() {
        
    }

    /**
     * displays gui
     */
    @Override
    public void displayGUI() {
        this.setVisible(true);
    }

    /**
     * hides gui
     */
    @Override
    public void hide() {
        this.setVisible(false);
    }

    public void update(String update) {
        LOGGER.info("REceived data from server..");
        StringBuilder currentServerText =
                new StringBuilder(serverTextArea.getText());
        currentServerText.append("\n").append(update);
        serverTextArea.setText(currentServerText.toString());
    }



}
